#
# Pure Fusion API
# Pure Fusion is fully API-driven. Most APIs which change the system (POST, PATCH, DELETE) return an Operation in status ""Pending"" or ""Running"". You can poll (GET) the operation to check its status, waiting for it to change to ""Succeeded"" or ""Failed"". 
# Version: 1.1
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Resource
No description available.
.PARAMETER ReadsPerSec
Reads per second
.PARAMETER ReadLatencyUs
Read Latency in microseconds
.PARAMETER ReadBandwidth
Read Bandwidth in bytes per second
.PARAMETER WritesPerSec
Writes per second
.PARAMETER WriteLatencyUs
Write Latency in microseconds
.PARAMETER WriteBandwidth
Write Bandwidth in bytes per second
.OUTPUTS

Performance<PSCustomObject>
#>

function Initialize-PSFPerformance {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Resource},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${ReadsPerSec},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${ReadLatencyUs},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${ReadBandwidth},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${WritesPerSec},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${WriteLatencyUs},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${WriteBandwidth}
    )

    Process {
        'Creating PSCustomObject: PSFusion => PSFPerformance' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "resource" = ${Resource}
            "reads_per_sec" = ${ReadsPerSec}
            "read_latency_us" = ${ReadLatencyUs}
            "read_bandwidth" = ${ReadBandwidth}
            "writes_per_sec" = ${WritesPerSec}
            "write_latency_us" = ${WriteLatencyUs}
            "write_bandwidth" = ${WriteBandwidth}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to Performance<PSCustomObject>

.DESCRIPTION

Convert from JSON to Performance<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

Performance<PSCustomObject>
#>
function ConvertFrom-PSFJsonToPerformance {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSFusion => PSFPerformance' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in PSFPerformance
        $AllProperties = ("resource", "reads_per_sec", "read_latency_us", "read_bandwidth", "writes_per_sec", "write_latency_us", "write_bandwidth")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "resource"))) { #optional property not found
            $Resource = $null
        } else {
            $Resource = $JsonParameters.PSobject.Properties["resource"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "reads_per_sec"))) { #optional property not found
            $ReadsPerSec = $null
        } else {
            $ReadsPerSec = $JsonParameters.PSobject.Properties["reads_per_sec"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "read_latency_us"))) { #optional property not found
            $ReadLatencyUs = $null
        } else {
            $ReadLatencyUs = $JsonParameters.PSobject.Properties["read_latency_us"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "read_bandwidth"))) { #optional property not found
            $ReadBandwidth = $null
        } else {
            $ReadBandwidth = $JsonParameters.PSobject.Properties["read_bandwidth"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "writes_per_sec"))) { #optional property not found
            $WritesPerSec = $null
        } else {
            $WritesPerSec = $JsonParameters.PSobject.Properties["writes_per_sec"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "write_latency_us"))) { #optional property not found
            $WriteLatencyUs = $null
        } else {
            $WriteLatencyUs = $JsonParameters.PSobject.Properties["write_latency_us"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "write_bandwidth"))) { #optional property not found
            $WriteBandwidth = $null
        } else {
            $WriteBandwidth = $JsonParameters.PSobject.Properties["write_bandwidth"].value
        }

        $PSO = [PSCustomObject]@{
            "resource" = ${Resource}
            "reads_per_sec" = ${ReadsPerSec}
            "read_latency_us" = ${ReadLatencyUs}
            "read_bandwidth" = ${ReadBandwidth}
            "writes_per_sec" = ${WritesPerSec}
            "write_latency_us" = ${WriteLatencyUs}
            "write_bandwidth" = ${WriteBandwidth}
        }

        return $PSO
    }

}

