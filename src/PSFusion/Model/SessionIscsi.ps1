#
# Pure Fusion API
# Pure Fusion is fully API-driven. Most APIs which change the system (POST, PATCH, DELETE) return an Operation in status ""Pending"" or ""Running"". You can poll (GET) the operation to check its status, waiting for it to change to ""Succeeded"" or ""Failed"". 
# Version: 1.1
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER InitiatorIqn
The iSCSI Qualified Name of the Initiator.
.PARAMETER TargetIqn
The iSCSI Qualified Name of the Target.
.PARAMETER InitiatorPortal
TCP/IP network address and tcp port number of the iSCSI Initiator.
.PARAMETER TargetDiscoveryAddress
The iSCSI Discovery Login IP for this session.
.PARAMETER TargetPortal
TCP/IP network address and tcp port number of the iSCSI Target.
.OUTPUTS

SessionIscsi<PSCustomObject>
#>

function Initialize-PSFSessionIscsi {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${InitiatorIqn},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${TargetIqn},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${InitiatorPortal},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${TargetDiscoveryAddress},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${TargetPortal}
    )

    Process {
        'Creating PSCustomObject: PSFusion => PSFSessionIscsi' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "initiator_iqn" = ${InitiatorIqn}
            "target_iqn" = ${TargetIqn}
            "initiator_portal" = ${InitiatorPortal}
            "target_discovery_address" = ${TargetDiscoveryAddress}
            "target_portal" = ${TargetPortal}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to SessionIscsi<PSCustomObject>

.DESCRIPTION

Convert from JSON to SessionIscsi<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

SessionIscsi<PSCustomObject>
#>
function ConvertFrom-PSFJsonToSessionIscsi {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSFusion => PSFSessionIscsi' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in PSFSessionIscsi
        $AllProperties = ("initiator_iqn", "target_iqn", "initiator_portal", "target_discovery_address", "target_portal")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "initiator_iqn"))) { #optional property not found
            $InitiatorIqn = $null
        } else {
            $InitiatorIqn = $JsonParameters.PSobject.Properties["initiator_iqn"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "target_iqn"))) { #optional property not found
            $TargetIqn = $null
        } else {
            $TargetIqn = $JsonParameters.PSobject.Properties["target_iqn"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "initiator_portal"))) { #optional property not found
            $InitiatorPortal = $null
        } else {
            $InitiatorPortal = $JsonParameters.PSobject.Properties["initiator_portal"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "target_discovery_address"))) { #optional property not found
            $TargetDiscoveryAddress = $null
        } else {
            $TargetDiscoveryAddress = $JsonParameters.PSobject.Properties["target_discovery_address"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "target_portal"))) { #optional property not found
            $TargetPortal = $null
        } else {
            $TargetPortal = $JsonParameters.PSobject.Properties["target_portal"].value
        }

        $PSO = [PSCustomObject]@{
            "initiator_iqn" = ${InitiatorIqn}
            "target_iqn" = ${TargetIqn}
            "initiator_portal" = ${InitiatorPortal}
            "target_discovery_address" = ${TargetDiscoveryAddress}
            "target_portal" = ${TargetPortal}
        }

        return $PSO
    }

}

