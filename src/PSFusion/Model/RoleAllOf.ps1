#
# Pure Fusion API
# Pure Fusion is fully API-driven. Most APIs which change the system (POST, PATCH, DELETE) return an Operation in status ""Pending"" or ""Running"". You can poll (GET) the operation to check its status, waiting for it to change to ""Succeeded"" or ""Failed"". 
# Version: 1.1
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Description
A description of the role's capabilities.
.PARAMETER AssignableScopes
A list of resource kinds the role can be scoped to.
.OUTPUTS

RoleAllOf<PSCustomObject>
#>

function Initialize-PSFRoleAllOf {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${AssignableScopes}
    )

    Process {
        'Creating PSCustomObject: PSFusion => PSFRoleAllOf' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Description) {
            throw "invalid value for 'Description', 'Description' cannot be null."
        }

        if ($null -eq $AssignableScopes) {
            throw "invalid value for 'AssignableScopes', 'AssignableScopes' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "description" = ${Description}
            "assignable_scopes" = ${AssignableScopes}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to RoleAllOf<PSCustomObject>

.DESCRIPTION

Convert from JSON to RoleAllOf<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

RoleAllOf<PSCustomObject>
#>
function ConvertFrom-PSFJsonToRoleAllOf {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSFusion => PSFRoleAllOf' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in PSFRoleAllOf
        $AllProperties = ("description", "assignable_scopes")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'description' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) {
            throw "Error! JSON cannot be serialized due to the required property 'description' missing."
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "assignable_scopes"))) {
            throw "Error! JSON cannot be serialized due to the required property 'assignable_scopes' missing."
        } else {
            $AssignableScopes = $JsonParameters.PSobject.Properties["assignable_scopes"].value
        }

        $PSO = [PSCustomObject]@{
            "description" = ${Description}
            "assignable_scopes" = ${AssignableScopes}
        }

        return $PSO
    }

}

