#
# Pure Fusion API
# Pure Fusion is fully API-driven. Most APIs which change the system (POST, PATCH, DELETE) return an Operation in status ""Pending"" or ""Running"". You can poll (GET) the operation to check its status, waiting for it to change to ""Succeeded"" or ""Failed"". 
# Version: 1.1
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER AvailabilityZone
The name of the Availability Zone that this PG should be created.
.PARAMETER Region
The name of the Region associated with the mentioned Availability Zone.
.PARAMETER StorageService
The name of the parent Storage Service
.OUTPUTS

PlacementGroupPostAllOf<PSCustomObject>
#>

function Initialize-PSFPlacementGroupPostAllOf {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AvailabilityZone},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Region},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${StorageService}
    )

    Process {
        'Creating PSCustomObject: PSFusion => PSFPlacementGroupPostAllOf' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $AvailabilityZone) {
            throw "invalid value for 'AvailabilityZone', 'AvailabilityZone' cannot be null."
        }

        if ($null -eq $Region) {
            throw "invalid value for 'Region', 'Region' cannot be null."
        }

        if ($null -eq $StorageService) {
            throw "invalid value for 'StorageService', 'StorageService' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "availability_zone" = ${AvailabilityZone}
            "region" = ${Region}
            "storage_service" = ${StorageService}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to PlacementGroupPostAllOf<PSCustomObject>

.DESCRIPTION

Convert from JSON to PlacementGroupPostAllOf<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

PlacementGroupPostAllOf<PSCustomObject>
#>
function ConvertFrom-PSFJsonToPlacementGroupPostAllOf {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSFusion => PSFPlacementGroupPostAllOf' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in PSFPlacementGroupPostAllOf
        $AllProperties = ("availability_zone", "region", "storage_service")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'availability_zone' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "availability_zone"))) {
            throw "Error! JSON cannot be serialized due to the required property 'availability_zone' missing."
        } else {
            $AvailabilityZone = $JsonParameters.PSobject.Properties["availability_zone"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "region"))) {
            throw "Error! JSON cannot be serialized due to the required property 'region' missing."
        } else {
            $Region = $JsonParameters.PSobject.Properties["region"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "storage_service"))) {
            throw "Error! JSON cannot be serialized due to the required property 'storage_service' missing."
        } else {
            $StorageService = $JsonParameters.PSobject.Properties["storage_service"].value
        }

        $PSO = [PSCustomObject]@{
            "availability_zone" = ${AvailabilityZone}
            "region" = ${Region}
            "storage_service" = ${StorageService}
        }

        return $PSO
    }

}

