#
# Pure Fusion API
# Pure Fusion is fully API-driven. Most APIs which change the system (POST, PATCH, DELETE) return an Operation in status ""Pending"" or ""Running"". You can poll (GET) the operation to check its status, waiting for it to change to ""Succeeded"" or ""Failed"". 
# Version: 1.1
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
The UUID of the operation.
.PARAMETER SelfLink
The URI of the operation, e.g., /tenants/<t>/tenant-spaces/<ts>/volumes/<v>. 
.PARAMETER Request
No description available.
.PARAMETER RequestType
Request type is a combination of action and resource kind, e.g., ""CreateVolume"".
.PARAMETER RequestId
The request ID specified with the REST call (or system generated) used for idempotence when making API calls. Any name is valid.
.PARAMETER RequestCollection
The URI of the request collection in which this operation was created. Valid values are ""/"", ""/<tenants>/<t>"" or ""/<tenants>/<t>/tenant-spaces<ts>"".
.PARAMETER State
No description available.
.PARAMETER Result
No description available.
.PARAMETER Status
The latest status of the operation indicates if it is waiting (Pending), active (Running, Aborting) or complete (Succeeded, Failed).
.PARAMETER RetryIn
Recommended time to wait before getting the operation again to observe status change (polling interval). Unit is milliseconds, e.g., 100.
.PARAMETER VarError
No description available.
.PARAMETER CreatedAt
The time that the operation was created, in milliseconds since the Unix epoch.
.OUTPUTS

Operation<PSCustomObject>
#>

function Initialize-PSFOperation {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SelfLink},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Request},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${RequestType},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${RequestId},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${RequestCollection},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${State},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Result},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("Pending", "Running", "Aborting", "Succeeded", "Failed")]
        [String]
        ${Status},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${RetryIn},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${VarError},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [Int64]
        ${CreatedAt}
    )

    Process {
        'Creating PSCustomObject: PSFusion => PSFOperation' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Id) {
            throw "invalid value for 'Id', 'Id' cannot be null."
        }

        if ($null -eq $SelfLink) {
            throw "invalid value for 'SelfLink', 'SelfLink' cannot be null."
        }

        if ($null -eq $RequestType) {
            throw "invalid value for 'RequestType', 'RequestType' cannot be null."
        }

        if ($null -eq $RequestId) {
            throw "invalid value for 'RequestId', 'RequestId' cannot be null."
        }

        if ($null -eq $Status) {
            throw "invalid value for 'Status', 'Status' cannot be null."
        }

        if ($null -eq $RetryIn) {
            throw "invalid value for 'RetryIn', 'RetryIn' cannot be null."
        }

        if ($null -eq $CreatedAt) {
            throw "invalid value for 'CreatedAt', 'CreatedAt' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "self_link" = ${SelfLink}
            "request" = ${Request}
            "request_type" = ${RequestType}
            "request_id" = ${RequestId}
            "request_collection" = ${RequestCollection}
            "state" = ${State}
            "result" = ${Result}
            "status" = ${Status}
            "retry_in" = ${RetryIn}
            "error" = ${VarError}
            "created_at" = ${CreatedAt}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to Operation<PSCustomObject>

.DESCRIPTION

Convert from JSON to Operation<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

Operation<PSCustomObject>
#>
function ConvertFrom-PSFJsonToOperation {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSFusion => PSFOperation' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in PSFOperation
        $AllProperties = ("id", "self_link", "request", "request_type", "request_id", "request_collection", "state", "result", "status", "retry_in", "error", "created_at")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'id' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) {
            throw "Error! JSON cannot be serialized due to the required property 'id' missing."
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "self_link"))) {
            throw "Error! JSON cannot be serialized due to the required property 'self_link' missing."
        } else {
            $SelfLink = $JsonParameters.PSobject.Properties["self_link"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "request_type"))) {
            throw "Error! JSON cannot be serialized due to the required property 'request_type' missing."
        } else {
            $RequestType = $JsonParameters.PSobject.Properties["request_type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "request_id"))) {
            throw "Error! JSON cannot be serialized due to the required property 'request_id' missing."
        } else {
            $RequestId = $JsonParameters.PSobject.Properties["request_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "status"))) {
            throw "Error! JSON cannot be serialized due to the required property 'status' missing."
        } else {
            $Status = $JsonParameters.PSobject.Properties["status"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "retry_in"))) {
            throw "Error! JSON cannot be serialized due to the required property 'retry_in' missing."
        } else {
            $RetryIn = $JsonParameters.PSobject.Properties["retry_in"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "created_at"))) {
            throw "Error! JSON cannot be serialized due to the required property 'created_at' missing."
        } else {
            $CreatedAt = $JsonParameters.PSobject.Properties["created_at"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "request"))) { #optional property not found
            $Request = $null
        } else {
            $Request = $JsonParameters.PSobject.Properties["request"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "request_collection"))) { #optional property not found
            $RequestCollection = $null
        } else {
            $RequestCollection = $JsonParameters.PSobject.Properties["request_collection"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "state"))) { #optional property not found
            $State = $null
        } else {
            $State = $JsonParameters.PSobject.Properties["state"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "result"))) { #optional property not found
            $Result = $null
        } else {
            $Result = $JsonParameters.PSobject.Properties["result"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "error"))) { #optional property not found
            $VarError = $null
        } else {
            $VarError = $JsonParameters.PSobject.Properties["error"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "self_link" = ${SelfLink}
            "request" = ${Request}
            "request_type" = ${RequestType}
            "request_id" = ${RequestId}
            "request_collection" = ${RequestCollection}
            "state" = ${State}
            "result" = ${Result}
            "status" = ${Status}
            "retry_in" = ${RetryIn}
            "error" = ${VarError}
            "created_at" = ${CreatedAt}
        }

        return $PSO
    }

}

