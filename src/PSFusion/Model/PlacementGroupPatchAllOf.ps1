#
# Pure Fusion API
# Pure Fusion is fully API-driven. Most APIs which change the system (POST, PATCH, DELETE) return an Operation in status ""Pending"" or ""Running"". You can poll (GET) the operation to check its status, waiting for it to change to ""Succeeded"" or ""Failed"". 
# Version: 1.1
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Array
No description available.
.OUTPUTS

PlacementGroupPatchAllOf<PSCustomObject>
#>

function Initialize-PSFPlacementGroupPatchAllOf {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Array}
    )

    Process {
        'Creating PSCustomObject: PSFusion => PSFPlacementGroupPatchAllOf' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "array" = ${Array}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to PlacementGroupPatchAllOf<PSCustomObject>

.DESCRIPTION

Convert from JSON to PlacementGroupPatchAllOf<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

PlacementGroupPatchAllOf<PSCustomObject>
#>
function ConvertFrom-PSFJsonToPlacementGroupPatchAllOf {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSFusion => PSFPlacementGroupPatchAllOf' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in PSFPlacementGroupPatchAllOf
        $AllProperties = ("array")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "array"))) { #optional property not found
            $Array = $null
        } else {
            $Array = $JsonParameters.PSobject.Properties["array"].value
        }

        $PSO = [PSCustomObject]@{
            "array" = ${Array}
        }

        return $PSO
    }

}

