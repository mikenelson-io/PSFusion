#
# Pure Fusion API
# Pure Fusion is fully API-driven. Most APIs which change the system (POST, PATCH, DELETE) return an Operation in status ""Pending"" or ""Running"". You can poll (GET) the operation to check its status, waiting for it to change to ""Succeeded"" or ""Failed"". 
# Version: 1.1
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

(Provider)

.PARAMETER Address
No description available.
.OUTPUTS

NetworkInterfacePatchEth<PSCustomObject>
#>

function Initialize-PSFNetworkInterfacePatchEth {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Address}
    )

    Process {
        'Creating PSCustomObject: PSFusion => PSFNetworkInterfacePatchEth' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "address" = ${Address}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to NetworkInterfacePatchEth<PSCustomObject>

.DESCRIPTION

Convert from JSON to NetworkInterfacePatchEth<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

NetworkInterfacePatchEth<PSCustomObject>
#>
function ConvertFrom-PSFJsonToNetworkInterfacePatchEth {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSFusion => PSFNetworkInterfacePatchEth' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in PSFNetworkInterfacePatchEth
        $AllProperties = ("address")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "address"))) { #optional property not found
            $Address = $null
        } else {
            $Address = $JsonParameters.PSobject.Properties["address"].value
        }

        $PSO = [PSCustomObject]@{
            "address" = ${Address}
        }

        return $PSO
    }

}

