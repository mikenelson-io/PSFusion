#
# Pure Fusion API
# Pure Fusion is fully API-driven. Most APIs which change the system (POST, PATCH, DELETE) return an Operation in status ""Pending"" or ""Running"". You can poll (GET) the operation to check its status, waiting for it to change to ""Succeeded"" or ""Failed"". 
# Version: 1.1
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Raw
Raw output from Pure1 Meta Recommendation engine in JSON string format
.PARAMETER Objectives
No description available.
.PARAMETER LoadValues
No description available.
.PARAMETER CapacityValues
No description available.
.PARAMETER DaysToReach90PercentCapacity
No description available.
.PARAMETER DaysToReach100PercentCapacity
No description available.
.PARAMETER VarError
No description available.
.PARAMETER Warnings
No description available.
.OUTPUTS

Pure1MetaPlacementRecommendation<PSCustomObject>
#>

function Initialize-PSFPure1MetaPlacementRecommendation {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Raw},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Objectives},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${LoadValues},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${CapacityValues},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${DaysToReach90PercentCapacity},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Decimal]]
        ${DaysToReach100PercentCapacity},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${VarError},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Warnings}
    )

    Process {
        'Creating PSCustomObject: PSFusion => PSFPure1MetaPlacementRecommendation' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "raw" = ${Raw}
            "objectives" = ${Objectives}
            "load_values" = ${LoadValues}
            "capacity_values" = ${CapacityValues}
            "days_to_reach_90_percent_capacity" = ${DaysToReach90PercentCapacity}
            "days_to_reach_100_percent_capacity" = ${DaysToReach100PercentCapacity}
            "error" = ${VarError}
            "warnings" = ${Warnings}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to Pure1MetaPlacementRecommendation<PSCustomObject>

.DESCRIPTION

Convert from JSON to Pure1MetaPlacementRecommendation<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

Pure1MetaPlacementRecommendation<PSCustomObject>
#>
function ConvertFrom-PSFJsonToPure1MetaPlacementRecommendation {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSFusion => PSFPure1MetaPlacementRecommendation' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in PSFPure1MetaPlacementRecommendation
        $AllProperties = ("raw", "objectives", "load_values", "capacity_values", "days_to_reach_90_percent_capacity", "days_to_reach_100_percent_capacity", "error", "warnings")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "raw"))) { #optional property not found
            $Raw = $null
        } else {
            $Raw = $JsonParameters.PSobject.Properties["raw"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "objectives"))) { #optional property not found
            $Objectives = $null
        } else {
            $Objectives = $JsonParameters.PSobject.Properties["objectives"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "load_values"))) { #optional property not found
            $LoadValues = $null
        } else {
            $LoadValues = $JsonParameters.PSobject.Properties["load_values"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "capacity_values"))) { #optional property not found
            $CapacityValues = $null
        } else {
            $CapacityValues = $JsonParameters.PSobject.Properties["capacity_values"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "days_to_reach_90_percent_capacity"))) { #optional property not found
            $DaysToReach90PercentCapacity = $null
        } else {
            $DaysToReach90PercentCapacity = $JsonParameters.PSobject.Properties["days_to_reach_90_percent_capacity"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "days_to_reach_100_percent_capacity"))) { #optional property not found
            $DaysToReach100PercentCapacity = $null
        } else {
            $DaysToReach100PercentCapacity = $JsonParameters.PSobject.Properties["days_to_reach_100_percent_capacity"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "error"))) { #optional property not found
            $VarError = $null
        } else {
            $VarError = $JsonParameters.PSobject.Properties["error"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "warnings"))) { #optional property not found
            $Warnings = $null
        } else {
            $Warnings = $JsonParameters.PSobject.Properties["warnings"].value
        }

        $PSO = [PSCustomObject]@{
            "raw" = ${Raw}
            "objectives" = ${Objectives}
            "load_values" = ${LoadValues}
            "capacity_values" = ${CapacityValues}
            "days_to_reach_90_percent_capacity" = ${DaysToReach90PercentCapacity}
            "days_to_reach_100_percent_capacity" = ${DaysToReach100PercentCapacity}
            "error" = ${VarError}
            "warnings" = ${Warnings}
        }

        return $PSO
    }

}

