#
# Pure Fusion API
# Pure Fusion is fully API-driven. Most APIs which change the system (POST, PATCH, DELETE) return an Operation in status ""Pending"" or ""Running"". You can poll (GET) the operation to check its status, waiting for it to change to ""Succeeded"" or ""Failed"". 
# Version: 1.1
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

An Ethernet interface on an Array

.PARAMETER Address
The IPv4 address associated with this Network Interface.
.PARAMETER Gateway
The IPv4 address of the gateway through which this Network Interface will communicate with the network.
.PARAMETER MacAddress
The media access control address associated with this Network Interface.
.PARAMETER Mtu
The maximum message transfer unit size for this Network Interface (in bytes).
.PARAMETER Vlan
The VLAN ID for this Network Interface.
.OUTPUTS

NetworkInterfaceEth<PSCustomObject>
#>

function Initialize-PSFNetworkInterfaceEth {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Address},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Gateway},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${MacAddress},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Mtu},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Vlan}
    )

    Process {
        'Creating PSCustomObject: PSFusion => PSFNetworkInterfaceEth' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "address" = ${Address}
            "gateway" = ${Gateway}
            "mac_address" = ${MacAddress}
            "mtu" = ${Mtu}
            "vlan" = ${Vlan}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to NetworkInterfaceEth<PSCustomObject>

.DESCRIPTION

Convert from JSON to NetworkInterfaceEth<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

NetworkInterfaceEth<PSCustomObject>
#>
function ConvertFrom-PSFJsonToNetworkInterfaceEth {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSFusion => PSFNetworkInterfaceEth' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in PSFNetworkInterfaceEth
        $AllProperties = ("address", "gateway", "mac_address", "mtu", "vlan")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "address"))) { #optional property not found
            $Address = $null
        } else {
            $Address = $JsonParameters.PSobject.Properties["address"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "gateway"))) { #optional property not found
            $Gateway = $null
        } else {
            $Gateway = $JsonParameters.PSobject.Properties["gateway"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "mac_address"))) { #optional property not found
            $MacAddress = $null
        } else {
            $MacAddress = $JsonParameters.PSobject.Properties["mac_address"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "mtu"))) { #optional property not found
            $Mtu = $null
        } else {
            $Mtu = $JsonParameters.PSobject.Properties["mtu"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "vlan"))) { #optional property not found
            $Vlan = $null
        } else {
            $Vlan = $JsonParameters.PSobject.Properties["vlan"].value
        }

        $PSO = [PSCustomObject]@{
            "address" = ${Address}
            "gateway" = ${Gateway}
            "mac_address" = ${MacAddress}
            "mtu" = ${Mtu}
            "vlan" = ${Vlan}
        }

        return $PSO
    }

}

