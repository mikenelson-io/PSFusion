#
# Pure Fusion API
# Pure Fusion is fully API-driven. Most APIs which change the system (POST, PATCH, DELETE) return an Operation in status ""Pending"" or ""Running"". You can poll (GET) the operation to check its status, waiting for it to change to ""Succeeded"" or ""Failed"". 
# Version: 1.1
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Name
The name of the resource, supplied by the user at creation, and used in the URI path of a resource.
.PARAMETER DisplayName
The display name of the resource.
.PARAMETER Iqn
The iSCSI qualified name (IQN) associated with the host
.PARAMETER Personality
The Personality of the Host machine, supported personality: windows, linux, esxi, oracle-vm-server. coming personality: aix, hitachi-vsp, hpux, solaris, vms
.OUTPUTS

HostAccessPoliciesPost<PSCustomObject>
#>

function Initialize-PSFHostAccessPoliciesPost {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DisplayName},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Iqn},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("windows", "linux", "esxi", "oracle-vm-server", "aix", "hitachi-vsp", "hpux", "solaris", "vms")]
        [String]
        ${Personality}
    )

    Process {
        'Creating PSCustomObject: PSFusion => PSFHostAccessPoliciesPost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Name) {
            throw "invalid value for 'Name', 'Name' cannot be null."
        }

        if ($null -eq $Iqn) {
            throw "invalid value for 'Iqn', 'Iqn' cannot be null."
        }

        if ($null -eq $Personality) {
            throw "invalid value for 'Personality', 'Personality' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "name" = ${Name}
            "display_name" = ${DisplayName}
            "iqn" = ${Iqn}
            "personality" = ${Personality}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to HostAccessPoliciesPost<PSCustomObject>

.DESCRIPTION

Convert from JSON to HostAccessPoliciesPost<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

HostAccessPoliciesPost<PSCustomObject>
#>
function ConvertFrom-PSFJsonToHostAccessPoliciesPost {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSFusion => PSFHostAccessPoliciesPost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in PSFHostAccessPoliciesPost
        $AllProperties = ("name", "display_name", "iqn", "personality")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'name' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) {
            throw "Error! JSON cannot be serialized due to the required property 'name' missing."
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "iqn"))) {
            throw "Error! JSON cannot be serialized due to the required property 'iqn' missing."
        } else {
            $Iqn = $JsonParameters.PSobject.Properties["iqn"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "personality"))) {
            throw "Error! JSON cannot be serialized due to the required property 'personality' missing."
        } else {
            $Personality = $JsonParameters.PSobject.Properties["personality"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "display_name"))) { #optional property not found
            $DisplayName = $null
        } else {
            $DisplayName = $JsonParameters.PSobject.Properties["display_name"].value
        }

        $PSO = [PSCustomObject]@{
            "name" = ${Name}
            "display_name" = ${DisplayName}
            "iqn" = ${Iqn}
            "personality" = ${Personality}
        }

        return $PSO
    }

}

