#
# Pure Fusion API
# Pure Fusion is fully API-driven. Most APIs which change the system (POST, PATCH, DELETE) return an Operation in status ""Pending"" or ""Running"". You can poll (GET) the operation to check its status, waiting for it to change to ""Succeeded"" or ""Failed"". 
# Version: 1.1
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

(Provider)

.PARAMETER Id
An immutable, globally unique, system generated identifier.
.PARAMETER Name
The name of the resource, supplied by the user at creation, and used in the URI path of a resource.
.PARAMETER SelfLink
The URI of the resource.
.PARAMETER DisplayName
The display name of the resource.
.PARAMETER ApartmentId
Apartment identifier of Array. Return value of purearray list
.PARAMETER HardwareType
No description available.
.PARAMETER Region
No description available.
.PARAMETER AvailabilityZone
No description available.
.PARAMETER ApplianceId
The Appliance id of the array.
.PARAMETER HostName
The host name of the array. This should resolve to the management address of the array. If DNS is not available, provide the management address directly.
.PARAMETER MaintenanceMode
The flag to indicate whether the array is ready to use or not. True if not ready.
.PARAMETER UnavailableMode
The flag to indicate whether the array is unavaialble/unhealthy. True if unavailable.
.OUTPUTS

Array<PSCustomObject>
#>

function Initialize-PSFArray {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SelfLink},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DisplayName},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ApartmentId},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${HardwareType},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Region},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${AvailabilityZone},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ApplianceId},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${HostName},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${MaintenanceMode},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${UnavailableMode}
    )

    Process {
        'Creating PSCustomObject: PSFusion => PSFArray' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Id) {
            throw "invalid value for 'Id', 'Id' cannot be null."
        }

        if ($null -eq $Name) {
            throw "invalid value for 'Name', 'Name' cannot be null."
        }

        if ($null -eq $SelfLink) {
            throw "invalid value for 'SelfLink', 'SelfLink' cannot be null."
        }

        if ($null -eq $ApartmentId) {
            throw "invalid value for 'ApartmentId', 'ApartmentId' cannot be null."
        }

        if ($null -eq $AvailabilityZone) {
            throw "invalid value for 'AvailabilityZone', 'AvailabilityZone' cannot be null."
        }

        if ($null -eq $ApplianceId) {
            throw "invalid value for 'ApplianceId', 'ApplianceId' cannot be null."
        }

        if ($null -eq $HostName) {
            throw "invalid value for 'HostName', 'HostName' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "name" = ${Name}
            "self_link" = ${SelfLink}
            "display_name" = ${DisplayName}
            "apartment_id" = ${ApartmentId}
            "hardware_type" = ${HardwareType}
            "region" = ${Region}
            "availability_zone" = ${AvailabilityZone}
            "appliance_id" = ${ApplianceId}
            "host_name" = ${HostName}
            "maintenance_mode" = ${MaintenanceMode}
            "unavailable_mode" = ${UnavailableMode}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to Array<PSCustomObject>

.DESCRIPTION

Convert from JSON to Array<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

Array<PSCustomObject>
#>
function ConvertFrom-PSFJsonToArray {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSFusion => PSFArray' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in PSFArray
        $AllProperties = ("id", "name", "self_link", "display_name", "apartment_id", "hardware_type", "region", "availability_zone", "appliance_id", "host_name", "maintenance_mode", "unavailable_mode")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'id' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) {
            throw "Error! JSON cannot be serialized due to the required property 'id' missing."
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) {
            throw "Error! JSON cannot be serialized due to the required property 'name' missing."
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "self_link"))) {
            throw "Error! JSON cannot be serialized due to the required property 'self_link' missing."
        } else {
            $SelfLink = $JsonParameters.PSobject.Properties["self_link"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "apartment_id"))) {
            throw "Error! JSON cannot be serialized due to the required property 'apartment_id' missing."
        } else {
            $ApartmentId = $JsonParameters.PSobject.Properties["apartment_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "availability_zone"))) {
            throw "Error! JSON cannot be serialized due to the required property 'availability_zone' missing."
        } else {
            $AvailabilityZone = $JsonParameters.PSobject.Properties["availability_zone"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "appliance_id"))) {
            throw "Error! JSON cannot be serialized due to the required property 'appliance_id' missing."
        } else {
            $ApplianceId = $JsonParameters.PSobject.Properties["appliance_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "host_name"))) {
            throw "Error! JSON cannot be serialized due to the required property 'host_name' missing."
        } else {
            $HostName = $JsonParameters.PSobject.Properties["host_name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "display_name"))) { #optional property not found
            $DisplayName = $null
        } else {
            $DisplayName = $JsonParameters.PSobject.Properties["display_name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "hardware_type"))) { #optional property not found
            $HardwareType = $null
        } else {
            $HardwareType = $JsonParameters.PSobject.Properties["hardware_type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "region"))) { #optional property not found
            $Region = $null
        } else {
            $Region = $JsonParameters.PSobject.Properties["region"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "maintenance_mode"))) { #optional property not found
            $MaintenanceMode = $null
        } else {
            $MaintenanceMode = $JsonParameters.PSobject.Properties["maintenance_mode"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "unavailable_mode"))) { #optional property not found
            $UnavailableMode = $null
        } else {
            $UnavailableMode = $JsonParameters.PSobject.Properties["unavailable_mode"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "name" = ${Name}
            "self_link" = ${SelfLink}
            "display_name" = ${DisplayName}
            "apartment_id" = ${ApartmentId}
            "hardware_type" = ${HardwareType}
            "region" = ${Region}
            "availability_zone" = ${AvailabilityZone}
            "appliance_id" = ${ApplianceId}
            "host_name" = ${HostName}
            "maintenance_mode" = ${MaintenanceMode}
            "unavailable_mode" = ${UnavailableMode}
        }

        return $PSO
    }

}

