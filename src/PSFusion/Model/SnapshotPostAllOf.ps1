#
# Pure Fusion API
# Pure Fusion is fully API-driven. Most APIs which change the system (POST, PATCH, DELETE) return an Operation in status ""Pending"" or ""Running"". You can poll (GET) the operation to check its status, waiting for it to change to ""Succeeded"" or ""Failed"". 
# Version: 1.1
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Volumes
List of volume names to have snapshots taken of.
.PARAMETER PlacementGroup
Placement Group to take snapshot of.
.OUTPUTS

SnapshotPostAllOf<PSCustomObject>
#>

function Initialize-PSFSnapshotPostAllOf {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${Volumes},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${PlacementGroup}
    )

    Process {
        'Creating PSCustomObject: PSFusion => PSFSnapshotPostAllOf' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "volumes" = ${Volumes}
            "placement_group" = ${PlacementGroup}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to SnapshotPostAllOf<PSCustomObject>

.DESCRIPTION

Convert from JSON to SnapshotPostAllOf<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

SnapshotPostAllOf<PSCustomObject>
#>
function ConvertFrom-PSFJsonToSnapshotPostAllOf {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSFusion => PSFSnapshotPostAllOf' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in PSFSnapshotPostAllOf
        $AllProperties = ("volumes", "placement_group")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "volumes"))) { #optional property not found
            $Volumes = $null
        } else {
            $Volumes = $JsonParameters.PSobject.Properties["volumes"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "placement_group"))) { #optional property not found
            $PlacementGroup = $null
        } else {
            $PlacementGroup = $JsonParameters.PSobject.Properties["placement_group"].value
        }

        $PSO = [PSCustomObject]@{
            "volumes" = ${Volumes}
            "placement_group" = ${PlacementGroup}
        }

        return $PSO
    }

}

