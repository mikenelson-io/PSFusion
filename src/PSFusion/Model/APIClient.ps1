#
# Pure Fusion API
# Pure Fusion is fully API-driven. Most APIs which change the system (POST, PATCH, DELETE) return an Operation in status ""Pending"" or ""Running"". You can poll (GET) the operation to check its status, waiting for it to change to ""Succeeded"" or ""Failed"". 
# Version: 1.1
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
An immutable, globally unique, system generated identifier.
.PARAMETER Name
The name of the resource, supplied by the user at creation, and used in the URI path of a resource.
.PARAMETER SelfLink
The URI of the resource.
.PARAMETER DisplayName
The display name of the resource.
.PARAMETER Issuer
The name of API client
.PARAMETER PublicKey
Public key in PEM format associated with the API Client
.PARAMETER LastKeyUpdate
The last time API client was updated
.PARAMETER LastUsed
The last time API client was used
.PARAMETER CreatorId
The Id of Principal that created the API Client
.OUTPUTS

APIClient<PSCustomObject>
#>

function Initialize-PSFAPIClient {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SelfLink},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DisplayName},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Issuer},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${PublicKey},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [Decimal]
        ${LastKeyUpdate},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [Decimal]
        ${LastUsed},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CreatorId}
    )

    Process {
        'Creating PSCustomObject: PSFusion => PSFAPIClient' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Id) {
            throw "invalid value for 'Id', 'Id' cannot be null."
        }

        if ($null -eq $Name) {
            throw "invalid value for 'Name', 'Name' cannot be null."
        }

        if ($null -eq $SelfLink) {
            throw "invalid value for 'SelfLink', 'SelfLink' cannot be null."
        }

        if ($null -eq $Issuer) {
            throw "invalid value for 'Issuer', 'Issuer' cannot be null."
        }

        if ($null -eq $PublicKey) {
            throw "invalid value for 'PublicKey', 'PublicKey' cannot be null."
        }

        if ($null -eq $LastKeyUpdate) {
            throw "invalid value for 'LastKeyUpdate', 'LastKeyUpdate' cannot be null."
        }

        if ($null -eq $LastUsed) {
            throw "invalid value for 'LastUsed', 'LastUsed' cannot be null."
        }

        if ($null -eq $CreatorId) {
            throw "invalid value for 'CreatorId', 'CreatorId' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "name" = ${Name}
            "self_link" = ${SelfLink}
            "display_name" = ${DisplayName}
            "issuer" = ${Issuer}
            "public_key" = ${PublicKey}
            "last_key_update" = ${LastKeyUpdate}
            "last_used" = ${LastUsed}
            "creator_id" = ${CreatorId}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to APIClient<PSCustomObject>

.DESCRIPTION

Convert from JSON to APIClient<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

APIClient<PSCustomObject>
#>
function ConvertFrom-PSFJsonToAPIClient {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSFusion => PSFAPIClient' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in PSFAPIClient
        $AllProperties = ("id", "name", "self_link", "display_name", "issuer", "public_key", "last_key_update", "last_used", "creator_id")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'id' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) {
            throw "Error! JSON cannot be serialized due to the required property 'id' missing."
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) {
            throw "Error! JSON cannot be serialized due to the required property 'name' missing."
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "self_link"))) {
            throw "Error! JSON cannot be serialized due to the required property 'self_link' missing."
        } else {
            $SelfLink = $JsonParameters.PSobject.Properties["self_link"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "issuer"))) {
            throw "Error! JSON cannot be serialized due to the required property 'issuer' missing."
        } else {
            $Issuer = $JsonParameters.PSobject.Properties["issuer"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "public_key"))) {
            throw "Error! JSON cannot be serialized due to the required property 'public_key' missing."
        } else {
            $PublicKey = $JsonParameters.PSobject.Properties["public_key"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "last_key_update"))) {
            throw "Error! JSON cannot be serialized due to the required property 'last_key_update' missing."
        } else {
            $LastKeyUpdate = $JsonParameters.PSobject.Properties["last_key_update"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "last_used"))) {
            throw "Error! JSON cannot be serialized due to the required property 'last_used' missing."
        } else {
            $LastUsed = $JsonParameters.PSobject.Properties["last_used"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "creator_id"))) {
            throw "Error! JSON cannot be serialized due to the required property 'creator_id' missing."
        } else {
            $CreatorId = $JsonParameters.PSobject.Properties["creator_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "display_name"))) { #optional property not found
            $DisplayName = $null
        } else {
            $DisplayName = $JsonParameters.PSobject.Properties["display_name"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "name" = ${Name}
            "self_link" = ${SelfLink}
            "display_name" = ${DisplayName}
            "issuer" = ${Issuer}
            "public_key" = ${PublicKey}
            "last_key_update" = ${LastKeyUpdate}
            "last_used" = ${LastUsed}
            "creator_id" = ${CreatorId}
        }

        return $PSO
    }

}

