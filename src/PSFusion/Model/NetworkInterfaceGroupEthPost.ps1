#
# Pure Fusion API
# Pure Fusion is fully API-driven. Most APIs which change the system (POST, PATCH, DELETE) return an Operation in status ""Pending"" or ""Running"". You can poll (GET) the operation to check its status, waiting for it to change to ""Succeeded"" or ""Failed"". 
# Version: 1.1
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Prefix
The IPv4 prefix for Network Interfaces in this Network Interface Group.
.PARAMETER Gateway
The IPv4 address of the gateway for Network Interfaces in this Network Interface Group.
.PARAMETER Mtu
Maximum message transfer unit (packet) size in bytes for the Network Interfaces in this Network Interface Group. MTU setting cannot exceed the MTU of the underlying physical interfaces.
.OUTPUTS

NetworkInterfaceGroupEthPost<PSCustomObject>
#>

function Initialize-PSFNetworkInterfaceGroupEthPost {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Prefix},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Gateway},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${Mtu}
    )

    Process {
        'Creating PSCustomObject: PSFusion => PSFNetworkInterfaceGroupEthPost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Prefix) {
            throw "invalid value for 'Prefix', 'Prefix' cannot be null."
        }

        if ($null -eq $Mtu) {
            throw "invalid value for 'Mtu', 'Mtu' cannot be null."
        }

        if ($Mtu -gt 9216) {
          throw "invalid value for 'Mtu', must be smaller than or equal to 9216."
        }

        if ($Mtu -lt 1280) {
          throw "invalid value for 'Mtu', must be greater than or equal to 1280."
        }


        $PSO = [PSCustomObject]@{
            "prefix" = ${Prefix}
            "gateway" = ${Gateway}
            "mtu" = ${Mtu}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to NetworkInterfaceGroupEthPost<PSCustomObject>

.DESCRIPTION

Convert from JSON to NetworkInterfaceGroupEthPost<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

NetworkInterfaceGroupEthPost<PSCustomObject>
#>
function ConvertFrom-PSFJsonToNetworkInterfaceGroupEthPost {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSFusion => PSFNetworkInterfaceGroupEthPost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in PSFNetworkInterfaceGroupEthPost
        $AllProperties = ("prefix", "gateway", "mtu")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'prefix' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "prefix"))) {
            throw "Error! JSON cannot be serialized due to the required property 'prefix' missing."
        } else {
            $Prefix = $JsonParameters.PSobject.Properties["prefix"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "mtu"))) {
            throw "Error! JSON cannot be serialized due to the required property 'mtu' missing."
        } else {
            $Mtu = $JsonParameters.PSobject.Properties["mtu"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "gateway"))) { #optional property not found
            $Gateway = $null
        } else {
            $Gateway = $JsonParameters.PSobject.Properties["gateway"].value
        }

        $PSO = [PSCustomObject]@{
            "prefix" = ${Prefix}
            "gateway" = ${Gateway}
            "mtu" = ${Mtu}
        }

        return $PSO
    }

}

