#
# Pure Fusion API
# Pure Fusion is fully API-driven. Most APIs which change the system (POST, PATCH, DELETE) return an Operation in status ""Pending"" or ""Running"". You can poll (GET) the operation to check its status, waiting for it to change to ""Succeeded"" or ""Failed"". 
# Version: 1.1
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Warnings returned from the PerfPlanner Recommendation Engine in Pure1Meta. Warnings do not prevent an array from being selected for Placement, but are noteworthy issues that a Provider should take a look, and might cause an array to have a lower recommendation score.

.PARAMETER Message
Description of the warning
.PARAMETER WarningCode
Unique code identifying the warning
.OUTPUTS

Pure1MetaWarning<PSCustomObject>
#>

function Initialize-PSFPure1MetaWarning {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Message},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${WarningCode}
    )

    Process {
        'Creating PSCustomObject: PSFusion => PSFPure1MetaWarning' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "message" = ${Message}
            "warning_code" = ${WarningCode}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to Pure1MetaWarning<PSCustomObject>

.DESCRIPTION

Convert from JSON to Pure1MetaWarning<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

Pure1MetaWarning<PSCustomObject>
#>
function ConvertFrom-PSFJsonToPure1MetaWarning {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSFusion => PSFPure1MetaWarning' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in PSFPure1MetaWarning
        $AllProperties = ("message", "warning_code")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "message"))) { #optional property not found
            $Message = $null
        } else {
            $Message = $JsonParameters.PSobject.Properties["message"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "warning_code"))) { #optional property not found
            $WarningCode = $null
        } else {
            $WarningCode = $JsonParameters.PSobject.Properties["warning_code"].value
        }

        $PSO = [PSCustomObject]@{
            "message" = ${Message}
            "warning_code" = ${WarningCode}
        }

        return $PSO
    }

}

