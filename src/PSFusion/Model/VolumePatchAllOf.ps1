#
# Pure Fusion API
# Pure Fusion is fully API-driven. Most APIs which change the system (POST, PATCH, DELETE) return an Operation in status ""Pending"" or ""Running"". You can poll (GET) the operation to check its status, waiting for it to change to ""Succeeded"" or ""Failed"". 
# Version: 1.1
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER SourceVolumeSnapshotLink
No description available.
.PARAMETER SourceLink
No description available.
.PARAMETER Size
No description available.
.PARAMETER StorageClass
No description available.
.PARAMETER PlacementGroup
No description available.
.PARAMETER ProtectionPolicy
No description available.
.PARAMETER HostAccessPolicies
No description available.
.PARAMETER Destroyed
No description available.
.OUTPUTS

VolumePatchAllOf<PSCustomObject>
#>

function Initialize-PSFVolumePatchAllOf {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${SourceVolumeSnapshotLink},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${SourceLink},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Size},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${StorageClass},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${PlacementGroup},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${ProtectionPolicy},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${HostAccessPolicies},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Destroyed}
    )

    Process {
        'Creating PSCustomObject: PSFusion => PSFVolumePatchAllOf' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "source_volume_snapshot_link" = ${SourceVolumeSnapshotLink}
            "source_link" = ${SourceLink}
            "size" = ${Size}
            "storage_class" = ${StorageClass}
            "placement_group" = ${PlacementGroup}
            "protection_policy" = ${ProtectionPolicy}
            "host_access_policies" = ${HostAccessPolicies}
            "destroyed" = ${Destroyed}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to VolumePatchAllOf<PSCustomObject>

.DESCRIPTION

Convert from JSON to VolumePatchAllOf<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

VolumePatchAllOf<PSCustomObject>
#>
function ConvertFrom-PSFJsonToVolumePatchAllOf {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSFusion => PSFVolumePatchAllOf' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in PSFVolumePatchAllOf
        $AllProperties = ("source_volume_snapshot_link", "source_link", "size", "storage_class", "placement_group", "protection_policy", "host_access_policies", "destroyed")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "source_volume_snapshot_link"))) { #optional property not found
            $SourceVolumeSnapshotLink = $null
        } else {
            $SourceVolumeSnapshotLink = $JsonParameters.PSobject.Properties["source_volume_snapshot_link"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "source_link"))) { #optional property not found
            $SourceLink = $null
        } else {
            $SourceLink = $JsonParameters.PSobject.Properties["source_link"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "size"))) { #optional property not found
            $Size = $null
        } else {
            $Size = $JsonParameters.PSobject.Properties["size"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "storage_class"))) { #optional property not found
            $StorageClass = $null
        } else {
            $StorageClass = $JsonParameters.PSobject.Properties["storage_class"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "placement_group"))) { #optional property not found
            $PlacementGroup = $null
        } else {
            $PlacementGroup = $JsonParameters.PSobject.Properties["placement_group"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "protection_policy"))) { #optional property not found
            $ProtectionPolicy = $null
        } else {
            $ProtectionPolicy = $JsonParameters.PSobject.Properties["protection_policy"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "host_access_policies"))) { #optional property not found
            $HostAccessPolicies = $null
        } else {
            $HostAccessPolicies = $JsonParameters.PSobject.Properties["host_access_policies"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "destroyed"))) { #optional property not found
            $Destroyed = $null
        } else {
            $Destroyed = $JsonParameters.PSobject.Properties["destroyed"].value
        }

        $PSO = [PSCustomObject]@{
            "source_volume_snapshot_link" = ${SourceVolumeSnapshotLink}
            "source_link" = ${SourceLink}
            "size" = ${Size}
            "storage_class" = ${StorageClass}
            "placement_group" = ${PlacementGroup}
            "protection_policy" = ${ProtectionPolicy}
            "host_access_policies" = ${HostAccessPolicies}
            "destroyed" = ${Destroyed}
        }

        return $PSO
    }

}

