#
# Pure Fusion API
# Pure Fusion is fully API-driven. Most APIs which change the system (POST, PATCH, DELETE) return an Operation in status ""Pending"" or ""Running"". You can poll (GET) the operation to check its status, waiting for it to change to ""Succeeded"" or ""Failed"". 
# Version: 1.1
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Value
NullableSize specifies an optional size (null or non-zero). Note that resizing a volume is potentially destructive if the new size is smaller!
.OUTPUTS

NullableSize<PSCustomObject>
#>

function Initialize-PSFNullableSize {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${Value}
    )

    Process {
        'Creating PSCustomObject: PSFusion => PSFNullableSize' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($Value -and $Value -lt 1048576) {
          throw "invalid value for 'Value', must be greater than or equal to 1048576."
        }


        $PSO = [PSCustomObject]@{
            "value" = ${Value}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to NullableSize<PSCustomObject>

.DESCRIPTION

Convert from JSON to NullableSize<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

NullableSize<PSCustomObject>
#>
function ConvertFrom-PSFJsonToNullableSize {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSFusion => PSFNullableSize' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in PSFNullableSize
        $AllProperties = ("value")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "value"))) { #optional property not found
            $Value = $null
        } else {
            $Value = $JsonParameters.PSobject.Properties["value"].value
        }

        $PSO = [PSCustomObject]@{
            "value" = ${Value}
        }

        return $PSO
    }

}

