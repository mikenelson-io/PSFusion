#
# Pure Fusion API
# Pure Fusion is fully API-driven. Most APIs which change the system (POST, PATCH, DELETE) return an Operation in status ""Pending"" or ""Running"". You can poll (GET) the operation to check its status, waiting for it to change to ""Succeeded"" or ""Failed"". 
# Version: 1.1
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Prefix
The IPv4 prefix for Network Interfaces in this Network Interface Group.
.PARAMETER Gateway
The IPv4 address of the gateway for Network Interfaces in this Network Interface Group.
.PARAMETER Vlan
The VLAN ID for this Network Interface Group.
.PARAMETER Mtu
The MTU for Network Interfaces in this Network Interface Group.
.OUTPUTS

NetworkInterfaceGroupEth<PSCustomObject>
#>

function Initialize-PSFNetworkInterfaceGroupEth {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Prefix},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Gateway},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Vlan},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${Mtu}
    )

    Process {
        'Creating PSCustomObject: PSFusion => PSFNetworkInterfaceGroupEth' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Prefix) {
            throw "invalid value for 'Prefix', 'Prefix' cannot be null."
        }

        if ($null -eq $Mtu) {
            throw "invalid value for 'Mtu', 'Mtu' cannot be null."
        }

        if ($Mtu -gt 9216) {
          throw "invalid value for 'Mtu', must be smaller than or equal to 9216."
        }

        if ($Mtu -lt 1280) {
          throw "invalid value for 'Mtu', must be greater than or equal to 1280."
        }


        $PSO = [PSCustomObject]@{
            "prefix" = ${Prefix}
            "gateway" = ${Gateway}
            "vlan" = ${Vlan}
            "mtu" = ${Mtu}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to NetworkInterfaceGroupEth<PSCustomObject>

.DESCRIPTION

Convert from JSON to NetworkInterfaceGroupEth<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

NetworkInterfaceGroupEth<PSCustomObject>
#>
function ConvertFrom-PSFJsonToNetworkInterfaceGroupEth {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSFusion => PSFNetworkInterfaceGroupEth' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in PSFNetworkInterfaceGroupEth
        $AllProperties = ("prefix", "gateway", "vlan", "mtu")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'prefix' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "prefix"))) {
            throw "Error! JSON cannot be serialized due to the required property 'prefix' missing."
        } else {
            $Prefix = $JsonParameters.PSobject.Properties["prefix"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "mtu"))) {
            throw "Error! JSON cannot be serialized due to the required property 'mtu' missing."
        } else {
            $Mtu = $JsonParameters.PSobject.Properties["mtu"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "gateway"))) { #optional property not found
            $Gateway = $null
        } else {
            $Gateway = $JsonParameters.PSobject.Properties["gateway"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "vlan"))) { #optional property not found
            $Vlan = $null
        } else {
            $Vlan = $JsonParameters.PSobject.Properties["vlan"].value
        }

        $PSO = [PSCustomObject]@{
            "prefix" = ${Prefix}
            "gateway" = ${Gateway}
            "vlan" = ${Vlan}
            "mtu" = ${Mtu}
        }

        return $PSO
    }

}

