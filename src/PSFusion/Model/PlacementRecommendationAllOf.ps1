#
# Pure Fusion API
# Pure Fusion is fully API-driven. Most APIs which change the system (POST, PATCH, DELETE) return an Operation in status ""Pending"" or ""Running"". You can poll (GET) the operation to check its status, waiting for it to change to ""Succeeded"" or ""Failed"". 
# Version: 1.1
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Tenant
No description available.
.PARAMETER TenantSpace
No description available.
.PARAMETER PlacementEngine
No description available.
.PARAMETER PlacementGroupId
If not empty, this is the Placement Group ID for which the placement recommendation was made
.PARAMETER PlacementGroup
No description available.
.PARAMETER SimulatedPlacement
No description available.
.PARAMETER IncludedArrays
A JSON array of Arrays that the Placement Group can be placed/migrated to
.PARAMETER ExcludedArrays
A JSON array of Arrays that the Placement Group cannot be placed on
.PARAMETER TargetArrays
If present, this is the list of arrays that was provided when requesting the placement recommendation report to consider for placement recommendations
.PARAMETER TimeRemaining
Number of milliseconds left before this Placement Recommendation report is deleted
.OUTPUTS

PlacementRecommendationAllOf<PSCustomObject>
#>

function Initialize-PSFPlacementRecommendationAllOf {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Tenant},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${TenantSpace},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("pure1meta", "heuristics")]
        [PSCustomObject]
        ${PlacementEngine},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${PlacementGroupId},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${PlacementGroup},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${SimulatedPlacement},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${IncludedArrays},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${ExcludedArrays},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${TargetArrays},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${TimeRemaining}
    )

    Process {
        'Creating PSCustomObject: PSFusion => PSFPlacementRecommendationAllOf' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "tenant" = ${Tenant}
            "tenant_space" = ${TenantSpace}
            "placement_engine" = ${PlacementEngine}
            "placement_group_id" = ${PlacementGroupId}
            "placement_group" = ${PlacementGroup}
            "simulated_placement" = ${SimulatedPlacement}
            "included_arrays" = ${IncludedArrays}
            "excluded_arrays" = ${ExcludedArrays}
            "target_arrays" = ${TargetArrays}
            "time_remaining" = ${TimeRemaining}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to PlacementRecommendationAllOf<PSCustomObject>

.DESCRIPTION

Convert from JSON to PlacementRecommendationAllOf<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

PlacementRecommendationAllOf<PSCustomObject>
#>
function ConvertFrom-PSFJsonToPlacementRecommendationAllOf {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSFusion => PSFPlacementRecommendationAllOf' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in PSFPlacementRecommendationAllOf
        $AllProperties = ("tenant", "tenant_space", "placement_engine", "placement_group_id", "placement_group", "simulated_placement", "included_arrays", "excluded_arrays", "target_arrays", "time_remaining")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "tenant"))) { #optional property not found
            $Tenant = $null
        } else {
            $Tenant = $JsonParameters.PSobject.Properties["tenant"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "tenant_space"))) { #optional property not found
            $TenantSpace = $null
        } else {
            $TenantSpace = $JsonParameters.PSobject.Properties["tenant_space"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "placement_engine"))) { #optional property not found
            $PlacementEngine = $null
        } else {
            $PlacementEngine = $JsonParameters.PSobject.Properties["placement_engine"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "placement_group_id"))) { #optional property not found
            $PlacementGroupId = $null
        } else {
            $PlacementGroupId = $JsonParameters.PSobject.Properties["placement_group_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "placement_group"))) { #optional property not found
            $PlacementGroup = $null
        } else {
            $PlacementGroup = $JsonParameters.PSobject.Properties["placement_group"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "simulated_placement"))) { #optional property not found
            $SimulatedPlacement = $null
        } else {
            $SimulatedPlacement = $JsonParameters.PSobject.Properties["simulated_placement"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "included_arrays"))) { #optional property not found
            $IncludedArrays = $null
        } else {
            $IncludedArrays = $JsonParameters.PSobject.Properties["included_arrays"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "excluded_arrays"))) { #optional property not found
            $ExcludedArrays = $null
        } else {
            $ExcludedArrays = $JsonParameters.PSobject.Properties["excluded_arrays"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "target_arrays"))) { #optional property not found
            $TargetArrays = $null
        } else {
            $TargetArrays = $JsonParameters.PSobject.Properties["target_arrays"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "time_remaining"))) { #optional property not found
            $TimeRemaining = $null
        } else {
            $TimeRemaining = $JsonParameters.PSobject.Properties["time_remaining"].value
        }

        $PSO = [PSCustomObject]@{
            "tenant" = ${Tenant}
            "tenant_space" = ${TenantSpace}
            "placement_engine" = ${PlacementEngine}
            "placement_group_id" = ${PlacementGroupId}
            "placement_group" = ${PlacementGroup}
            "simulated_placement" = ${SimulatedPlacement}
            "included_arrays" = ${IncludedArrays}
            "excluded_arrays" = ${ExcludedArrays}
            "target_arrays" = ${TargetArrays}
            "time_remaining" = ${TimeRemaining}
        }

        return $PSO
    }

}

