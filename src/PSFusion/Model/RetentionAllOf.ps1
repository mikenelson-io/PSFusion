#
# Pure Fusion API
# Pure Fusion is fully API-driven. Most APIs which change the system (POST, PATCH, DELETE) return an Operation in status ""Pending"" or ""Running"". You can poll (GET) the operation to check its status, waiting for it to change to ""Succeeded"" or ""Failed"". 
# Version: 1.1
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER After
Rentenion period: how long the snapshots will be retained.  Format: only support subset of **Durations** format in https://en.wikipedia.org/wiki/ISO_8601. 1. The time designators(P,T,H,M,S) must be capital letters.  2. Only accepts whole numbers.  3. Leading zeroes are not required.
.OUTPUTS

RetentionAllOf<PSCustomObject>
#>

function Initialize-PSFRetentionAllOf {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [ValidatePattern("^PT(?!$)(\d+H)?(\d+M)?(\d+S)?$")]
        [String]
        ${After}
    )

    Process {
        'Creating PSCustomObject: PSFusion => PSFRetentionAllOf' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "after" = ${After}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to RetentionAllOf<PSCustomObject>

.DESCRIPTION

Convert from JSON to RetentionAllOf<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

RetentionAllOf<PSCustomObject>
#>
function ConvertFrom-PSFJsonToRetentionAllOf {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSFusion => PSFRetentionAllOf' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in PSFRetentionAllOf
        $AllProperties = ("after")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "after"))) { #optional property not found
            $After = $null
        } else {
            $After = $JsonParameters.PSobject.Properties["after"].value
        }

        $PSO = [PSCustomObject]@{
            "after" = ${After}
        }

        return $PSO
    }

}

