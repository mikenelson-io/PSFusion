#
# Pure Fusion API
# Pure Fusion is fully API-driven. Most APIs which change the system (POST, PATCH, DELETE) return an Operation in status ""Pending"" or ""Running"". You can poll (GET) the operation to check its status, waiting for it to change to ""Succeeded"" or ""Failed"". 
# Version: 1.1
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Tenant
No description available.
.PARAMETER VolumesLink
No description available.
.PARAMETER SnapshotsLink
No description available.
.PARAMETER PlacementGroupsLink
No description available.
.OUTPUTS

TenantSpaceAllOf<PSCustomObject>
#>

function Initialize-PSFTenantSpaceAllOf {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Tenant},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${VolumesLink},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SnapshotsLink},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${PlacementGroupsLink}
    )

    Process {
        'Creating PSCustomObject: PSFusion => PSFTenantSpaceAllOf' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "tenant" = ${Tenant}
            "volumes_link" = ${VolumesLink}
            "snapshots_link" = ${SnapshotsLink}
            "placement_groups_link" = ${PlacementGroupsLink}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to TenantSpaceAllOf<PSCustomObject>

.DESCRIPTION

Convert from JSON to TenantSpaceAllOf<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

TenantSpaceAllOf<PSCustomObject>
#>
function ConvertFrom-PSFJsonToTenantSpaceAllOf {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSFusion => PSFTenantSpaceAllOf' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in PSFTenantSpaceAllOf
        $AllProperties = ("tenant", "volumes_link", "snapshots_link", "placement_groups_link")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "tenant"))) { #optional property not found
            $Tenant = $null
        } else {
            $Tenant = $JsonParameters.PSobject.Properties["tenant"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "volumes_link"))) { #optional property not found
            $VolumesLink = $null
        } else {
            $VolumesLink = $JsonParameters.PSobject.Properties["volumes_link"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "snapshots_link"))) { #optional property not found
            $SnapshotsLink = $null
        } else {
            $SnapshotsLink = $JsonParameters.PSobject.Properties["snapshots_link"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "placement_groups_link"))) { #optional property not found
            $PlacementGroupsLink = $null
        } else {
            $PlacementGroupsLink = $JsonParameters.PSobject.Properties["placement_groups_link"].value
        }

        $PSO = [PSCustomObject]@{
            "tenant" = ${Tenant}
            "volumes_link" = ${VolumesLink}
            "snapshots_link" = ${SnapshotsLink}
            "placement_groups_link" = ${PlacementGroupsLink}
        }

        return $PSO
    }

}

