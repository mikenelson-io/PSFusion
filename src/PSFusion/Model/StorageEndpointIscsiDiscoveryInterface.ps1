#
# Pure Fusion API
# Pure Fusion is fully API-driven. Most APIs which change the system (POST, PATCH, DELETE) return an Operation in status ""Pending"" or ""Running"". You can poll (GET) the operation to check its status, waiting for it to change to ""Succeeded"" or ""Failed"". 
# Version: 1.1
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Address
The IPv4 address for this interface.
.PARAMETER Gateway
The IPv4 address of the gateway through which this interface will communicate with the network.
.PARAMETER Mtu
Maximum message transfer unit (packet) size in bytes for this discovery interface.
.PARAMETER NetworkInterfaceGroups
No description available.
.OUTPUTS

StorageEndpointIscsiDiscoveryInterface<PSCustomObject>
#>

function Initialize-PSFStorageEndpointIscsiDiscoveryInterface {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Address},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Gateway},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Mtu},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${NetworkInterfaceGroups}
    )

    Process {
        'Creating PSCustomObject: PSFusion => PSFStorageEndpointIscsiDiscoveryInterface' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Address) {
            throw "invalid value for 'Address', 'Address' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "address" = ${Address}
            "gateway" = ${Gateway}
            "mtu" = ${Mtu}
            "network_interface_groups" = ${NetworkInterfaceGroups}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to StorageEndpointIscsiDiscoveryInterface<PSCustomObject>

.DESCRIPTION

Convert from JSON to StorageEndpointIscsiDiscoveryInterface<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

StorageEndpointIscsiDiscoveryInterface<PSCustomObject>
#>
function ConvertFrom-PSFJsonToStorageEndpointIscsiDiscoveryInterface {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSFusion => PSFStorageEndpointIscsiDiscoveryInterface' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in PSFStorageEndpointIscsiDiscoveryInterface
        $AllProperties = ("address", "gateway", "mtu", "network_interface_groups")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'address' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "address"))) {
            throw "Error! JSON cannot be serialized due to the required property 'address' missing."
        } else {
            $Address = $JsonParameters.PSobject.Properties["address"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "gateway"))) { #optional property not found
            $Gateway = $null
        } else {
            $Gateway = $JsonParameters.PSobject.Properties["gateway"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "mtu"))) { #optional property not found
            $Mtu = $null
        } else {
            $Mtu = $JsonParameters.PSobject.Properties["mtu"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "network_interface_groups"))) { #optional property not found
            $NetworkInterfaceGroups = $null
        } else {
            $NetworkInterfaceGroups = $JsonParameters.PSobject.Properties["network_interface_groups"].value
        }

        $PSO = [PSCustomObject]@{
            "address" = ${Address}
            "gateway" = ${Gateway}
            "mtu" = ${Mtu}
            "network_interface_groups" = ${NetworkInterfaceGroups}
        }

        return $PSO
    }

}

