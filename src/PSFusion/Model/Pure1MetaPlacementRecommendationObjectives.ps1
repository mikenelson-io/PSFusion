#
# Pure Fusion API
# Pure Fusion is fully API-driven. Most APIs which change the system (POST, PATCH, DELETE) return an Operation in status ""Pending"" or ""Running"". You can poll (GET) the operation to check its status, waiting for it to change to ""Succeeded"" or ""Failed"". 
# Version: 1.1
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER AvgPerfUsage
No description available.
.PARAMETER AvgCapUsage
No description available.
.PARAMETER VarPerfUsage
No description available.
.PARAMETER VarCapUsage
No description available.
.PARAMETER MaxPerfUsage
No description available.
.PARAMETER MaxCapUsage
No description available.
.OUTPUTS

Pure1MetaPlacementRecommendationObjectives<PSCustomObject>
#>

function Initialize-PSFPure1MetaPlacementRecommendationObjectives {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${AvgPerfUsage},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${AvgCapUsage},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${VarPerfUsage},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${VarCapUsage},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${MaxPerfUsage},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${MaxCapUsage}
    )

    Process {
        'Creating PSCustomObject: PSFusion => PSFPure1MetaPlacementRecommendationObjectives' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "avg_perf_usage" = ${AvgPerfUsage}
            "avg_cap_usage" = ${AvgCapUsage}
            "var_perf_usage" = ${VarPerfUsage}
            "var_cap_usage" = ${VarCapUsage}
            "max_perf_usage" = ${MaxPerfUsage}
            "max_cap_usage" = ${MaxCapUsage}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to Pure1MetaPlacementRecommendationObjectives<PSCustomObject>

.DESCRIPTION

Convert from JSON to Pure1MetaPlacementRecommendationObjectives<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

Pure1MetaPlacementRecommendationObjectives<PSCustomObject>
#>
function ConvertFrom-PSFJsonToPure1MetaPlacementRecommendationObjectives {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSFusion => PSFPure1MetaPlacementRecommendationObjectives' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in PSFPure1MetaPlacementRecommendationObjectives
        $AllProperties = ("avg_perf_usage", "avg_cap_usage", "var_perf_usage", "var_cap_usage", "max_perf_usage", "max_cap_usage")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "avg_perf_usage"))) { #optional property not found
            $AvgPerfUsage = $null
        } else {
            $AvgPerfUsage = $JsonParameters.PSobject.Properties["avg_perf_usage"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "avg_cap_usage"))) { #optional property not found
            $AvgCapUsage = $null
        } else {
            $AvgCapUsage = $JsonParameters.PSobject.Properties["avg_cap_usage"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "var_perf_usage"))) { #optional property not found
            $VarPerfUsage = $null
        } else {
            $VarPerfUsage = $JsonParameters.PSobject.Properties["var_perf_usage"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "var_cap_usage"))) { #optional property not found
            $VarCapUsage = $null
        } else {
            $VarCapUsage = $JsonParameters.PSobject.Properties["var_cap_usage"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "max_perf_usage"))) { #optional property not found
            $MaxPerfUsage = $null
        } else {
            $MaxPerfUsage = $JsonParameters.PSobject.Properties["max_perf_usage"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "max_cap_usage"))) { #optional property not found
            $MaxCapUsage = $null
        } else {
            $MaxCapUsage = $JsonParameters.PSobject.Properties["max_cap_usage"].value
        }

        $PSO = [PSCustomObject]@{
            "avg_perf_usage" = ${AvgPerfUsage}
            "avg_cap_usage" = ${AvgCapUsage}
            "var_perf_usage" = ${VarPerfUsage}
            "var_cap_usage" = ${VarCapUsage}
            "max_perf_usage" = ${MaxPerfUsage}
            "max_cap_usage" = ${MaxCapUsage}
        }

        return $PSO
    }

}

