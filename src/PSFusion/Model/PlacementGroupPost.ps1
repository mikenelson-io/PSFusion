#
# Pure Fusion API
# Pure Fusion is fully API-driven. Most APIs which change the system (POST, PATCH, DELETE) return an Operation in status ""Pending"" or ""Running"". You can poll (GET) the operation to check its status, waiting for it to change to ""Succeeded"" or ""Failed"". 
# Version: 1.1
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Name
The name of the resource, supplied by the user at creation, and used in the URI path of a resource.
.PARAMETER DisplayName
The display name of the resource.
.PARAMETER AvailabilityZone
The name of the Availability Zone that this PG should be created.
.PARAMETER Region
The name of the Region associated with the mentioned Availability Zone.
.PARAMETER StorageService
The name of the parent Storage Service
.OUTPUTS

PlacementGroupPost<PSCustomObject>
#>

function Initialize-PSFPlacementGroupPost {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DisplayName},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AvailabilityZone},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Region},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${StorageService}
    )

    Process {
        'Creating PSCustomObject: PSFusion => PSFPlacementGroupPost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Name) {
            throw "invalid value for 'Name', 'Name' cannot be null."
        }

        if ($null -eq $AvailabilityZone) {
            throw "invalid value for 'AvailabilityZone', 'AvailabilityZone' cannot be null."
        }

        if ($null -eq $Region) {
            throw "invalid value for 'Region', 'Region' cannot be null."
        }

        if ($null -eq $StorageService) {
            throw "invalid value for 'StorageService', 'StorageService' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "name" = ${Name}
            "display_name" = ${DisplayName}
            "availability_zone" = ${AvailabilityZone}
            "region" = ${Region}
            "storage_service" = ${StorageService}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to PlacementGroupPost<PSCustomObject>

.DESCRIPTION

Convert from JSON to PlacementGroupPost<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

PlacementGroupPost<PSCustomObject>
#>
function ConvertFrom-PSFJsonToPlacementGroupPost {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSFusion => PSFPlacementGroupPost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in PSFPlacementGroupPost
        $AllProperties = ("name", "display_name", "availability_zone", "region", "storage_service")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'name' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) {
            throw "Error! JSON cannot be serialized due to the required property 'name' missing."
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "availability_zone"))) {
            throw "Error! JSON cannot be serialized due to the required property 'availability_zone' missing."
        } else {
            $AvailabilityZone = $JsonParameters.PSobject.Properties["availability_zone"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "region"))) {
            throw "Error! JSON cannot be serialized due to the required property 'region' missing."
        } else {
            $Region = $JsonParameters.PSobject.Properties["region"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "storage_service"))) {
            throw "Error! JSON cannot be serialized due to the required property 'storage_service' missing."
        } else {
            $StorageService = $JsonParameters.PSobject.Properties["storage_service"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "display_name"))) { #optional property not found
            $DisplayName = $null
        } else {
            $DisplayName = $JsonParameters.PSobject.Properties["display_name"].value
        }

        $PSO = [PSCustomObject]@{
            "name" = ${Name}
            "display_name" = ${DisplayName}
            "availability_zone" = ${AvailabilityZone}
            "region" = ${Region}
            "storage_service" = ${StorageService}
        }

        return $PSO
    }

}

