#
# Pure Fusion API
# Pure Fusion is fully API-driven. Most APIs which change the system (POST, PATCH, DELETE) return an Operation in status ""Pending"" or ""Running"". You can poll (GET) the operation to check its status, waiting for it to change to ""Succeeded"" or ""Failed"". 
# Version: 1.1
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Message
The error message, e.g., ""Cannot delete a volume while it is connected to hosts"".
.PARAMETER Details
Key-value pairs containing details about the error.
.PARAMETER PureCode
Pure Code describing the error. May be more specific than the HTTP code. The code may be one of the following. INTERNAL - An internal error occurred. NOT_FOUND - A resource was not found. ALREADY_EXISTS - A resource cannot be created because one already exists by this name. INVALID_ARGUMENT - An argument value is incorrect. NOT_AUTHENTICATED - The client is not authenticated. PERMISSION_DENIED - The client is authenticated, but lacks a specific permission required for this action. NOT_IMPLEMENTED - The functionality has not been implemented yet. FAILED_PRECONDITION - A precondition of the action is not fulfilled. For instance, trying to use a resource that is being deleted. CONFLICT - This action came into conflict with another. FAILED_TRANSACTION - An action could not be performed due to conflict with another transaction. CANCELED - The action was canceled. DEADLINE_EXCEEDED - The action could not be completed in the time allotted. UNAVAILABLE - A required service is unavailable. EXHAUSTED - A required resource is not available. For instance, there is no storage space in the Placement Group. 
.PARAMETER HttpCode
The HTTP code returned by the request. It will be the same as the header response status code. The code may be one of the following. 400 Bad Request - The request payload is malformed; e.g. incorrection JSON. 401 Unauthorized - The client is not authenticated. 403 Forbidden - The client is authenticated, but lacks a specific permission required for this action. 404 Not Found - A resource was not found. 408 Request Timeout - The action could not be completed in the time allotted. 409 Conflict - This action came into conflict with another. 412 Precondition Failed - A precondition of the action is not fulfilled. For instance, trying to use a resource that is being deleted. 422 Unprocessable Entity - An argument value is incorrect. The request was well-formed but was unable to be followed due to semantic errors; e.g. an incorrect enum value. 429 Too Many Requests - The user has sent too many requests in a given amount of time (""rate limiting""). 500 Internal Server Error - An internal error occurred. 501 Not Implemented - The functionality has not been implemented yet. 503 Service Unavailable - A required service is unavailable. 
.OUTPUTS

ModelError<PSCustomObject>
#>

function Initialize-PSFModelError {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Message},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Collections.Hashtable]
        ${Details},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("INTERNAL", "NOT_FOUND", "ALREADY_EXISTS", "INVALID_ARGUMENT", "NOT_AUTHENTICATED", "PERMISSION_DENIED", "NOT_IMPLEMENTED", "FAILED_PRECONDITION", "CONFLICT", "FAILED_TRANSACTION", "CANCELED", "DEADLINE_EXCEEDED", "UNAVAILABLE", "EXHAUSTED")]
        [String]
        ${PureCode},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("401", "403", "404", "408", "409", "412", "422", "429", "500", "501", "503")]
        [Int32]
        ${HttpCode}
    )

    Process {
        'Creating PSCustomObject: PSFusion => PSFModelError' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Message) {
            throw "invalid value for 'Message', 'Message' cannot be null."
        }

        if ($null -eq $Details) {
            throw "invalid value for 'Details', 'Details' cannot be null."
        }

        if ($null -eq $PureCode) {
            throw "invalid value for 'PureCode', 'PureCode' cannot be null."
        }

        if ($null -eq $HttpCode) {
            throw "invalid value for 'HttpCode', 'HttpCode' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "message" = ${Message}
            "details" = ${Details}
            "pure_code" = ${PureCode}
            "http_code" = ${HttpCode}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ModelError<PSCustomObject>

.DESCRIPTION

Convert from JSON to ModelError<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ModelError<PSCustomObject>
#>
function ConvertFrom-PSFJsonToModelError {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSFusion => PSFModelError' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in PSFModelError
        $AllProperties = ("message", "details", "pure_code", "http_code")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'message' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "message"))) {
            throw "Error! JSON cannot be serialized due to the required property 'message' missing."
        } else {
            $Message = $JsonParameters.PSobject.Properties["message"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "details"))) {
            throw "Error! JSON cannot be serialized due to the required property 'details' missing."
        } else {
            $Details = $JsonParameters.PSobject.Properties["details"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "pure_code"))) {
            throw "Error! JSON cannot be serialized due to the required property 'pure_code' missing."
        } else {
            $PureCode = $JsonParameters.PSobject.Properties["pure_code"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "http_code"))) {
            throw "Error! JSON cannot be serialized due to the required property 'http_code' missing."
        } else {
            $HttpCode = $JsonParameters.PSobject.Properties["http_code"].value
        }

        $PSO = [PSCustomObject]@{
            "message" = ${Message}
            "details" = ${Details}
            "pure_code" = ${PureCode}
            "http_code" = ${HttpCode}
        }

        return $PSO
    }

}

