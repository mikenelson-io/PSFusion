#
# Pure Fusion API
# Pure Fusion is fully API-driven. Most APIs which change the system (POST, PATCH, DELETE) return an Operation in status ""Pending"" or ""Running"". You can poll (GET) the operation to check its status, waiting for it to change to ""Succeeded"" or ""Failed"". 
# Version: 1.1
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
An immutable, globally unique, system generated identifier.
.PARAMETER Name
The name of the resource, supplied by the user at creation, and used in the URI path of a resource.
.PARAMETER SelfLink
The URI of the resource.
.PARAMETER DisplayName
The display name of the resource.
.PARAMETER Tenant
No description available.
.PARAMETER TenantSpace
No description available.
.PARAMETER PlacementEngine
No description available.
.PARAMETER PlacementGroupId
If not empty, this is the Placement Group ID for which the placement recommendation was made
.PARAMETER PlacementGroup
No description available.
.PARAMETER SimulatedPlacement
No description available.
.PARAMETER IncludedArrays
A JSON array of Arrays that the Placement Group can be placed/migrated to
.PARAMETER ExcludedArrays
A JSON array of Arrays that the Placement Group cannot be placed on
.PARAMETER TargetArrays
If present, this is the list of arrays that was provided when requesting the placement recommendation report to consider for placement recommendations
.PARAMETER TimeRemaining
Number of milliseconds left before this Placement Recommendation report is deleted
.OUTPUTS

PlacementRecommendation<PSCustomObject>
#>

function Initialize-PSFPlacementRecommendation {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SelfLink},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DisplayName},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Tenant},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${TenantSpace},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("pure1meta", "heuristics")]
        [PSCustomObject]
        ${PlacementEngine},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${PlacementGroupId},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${PlacementGroup},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${SimulatedPlacement},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${IncludedArrays},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${ExcludedArrays},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${TargetArrays},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${TimeRemaining}
    )

    Process {
        'Creating PSCustomObject: PSFusion => PSFPlacementRecommendation' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Id) {
            throw "invalid value for 'Id', 'Id' cannot be null."
        }

        if ($null -eq $Name) {
            throw "invalid value for 'Name', 'Name' cannot be null."
        }

        if ($null -eq $SelfLink) {
            throw "invalid value for 'SelfLink', 'SelfLink' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "name" = ${Name}
            "self_link" = ${SelfLink}
            "display_name" = ${DisplayName}
            "tenant" = ${Tenant}
            "tenant_space" = ${TenantSpace}
            "placement_engine" = ${PlacementEngine}
            "placement_group_id" = ${PlacementGroupId}
            "placement_group" = ${PlacementGroup}
            "simulated_placement" = ${SimulatedPlacement}
            "included_arrays" = ${IncludedArrays}
            "excluded_arrays" = ${ExcludedArrays}
            "target_arrays" = ${TargetArrays}
            "time_remaining" = ${TimeRemaining}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to PlacementRecommendation<PSCustomObject>

.DESCRIPTION

Convert from JSON to PlacementRecommendation<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

PlacementRecommendation<PSCustomObject>
#>
function ConvertFrom-PSFJsonToPlacementRecommendation {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSFusion => PSFPlacementRecommendation' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in PSFPlacementRecommendation
        $AllProperties = ("id", "name", "self_link", "display_name", "tenant", "tenant_space", "placement_engine", "placement_group_id", "placement_group", "simulated_placement", "included_arrays", "excluded_arrays", "target_arrays", "time_remaining")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'id' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) {
            throw "Error! JSON cannot be serialized due to the required property 'id' missing."
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) {
            throw "Error! JSON cannot be serialized due to the required property 'name' missing."
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "self_link"))) {
            throw "Error! JSON cannot be serialized due to the required property 'self_link' missing."
        } else {
            $SelfLink = $JsonParameters.PSobject.Properties["self_link"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "display_name"))) { #optional property not found
            $DisplayName = $null
        } else {
            $DisplayName = $JsonParameters.PSobject.Properties["display_name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "tenant"))) { #optional property not found
            $Tenant = $null
        } else {
            $Tenant = $JsonParameters.PSobject.Properties["tenant"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "tenant_space"))) { #optional property not found
            $TenantSpace = $null
        } else {
            $TenantSpace = $JsonParameters.PSobject.Properties["tenant_space"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "placement_engine"))) { #optional property not found
            $PlacementEngine = $null
        } else {
            $PlacementEngine = $JsonParameters.PSobject.Properties["placement_engine"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "placement_group_id"))) { #optional property not found
            $PlacementGroupId = $null
        } else {
            $PlacementGroupId = $JsonParameters.PSobject.Properties["placement_group_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "placement_group"))) { #optional property not found
            $PlacementGroup = $null
        } else {
            $PlacementGroup = $JsonParameters.PSobject.Properties["placement_group"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "simulated_placement"))) { #optional property not found
            $SimulatedPlacement = $null
        } else {
            $SimulatedPlacement = $JsonParameters.PSobject.Properties["simulated_placement"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "included_arrays"))) { #optional property not found
            $IncludedArrays = $null
        } else {
            $IncludedArrays = $JsonParameters.PSobject.Properties["included_arrays"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "excluded_arrays"))) { #optional property not found
            $ExcludedArrays = $null
        } else {
            $ExcludedArrays = $JsonParameters.PSobject.Properties["excluded_arrays"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "target_arrays"))) { #optional property not found
            $TargetArrays = $null
        } else {
            $TargetArrays = $JsonParameters.PSobject.Properties["target_arrays"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "time_remaining"))) { #optional property not found
            $TimeRemaining = $null
        } else {
            $TimeRemaining = $JsonParameters.PSobject.Properties["time_remaining"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "name" = ${Name}
            "self_link" = ${SelfLink}
            "display_name" = ${DisplayName}
            "tenant" = ${Tenant}
            "tenant_space" = ${TenantSpace}
            "placement_engine" = ${PlacementEngine}
            "placement_group_id" = ${PlacementGroupId}
            "placement_group" = ${PlacementGroup}
            "simulated_placement" = ${SimulatedPlacement}
            "included_arrays" = ${IncludedArrays}
            "excluded_arrays" = ${ExcludedArrays}
            "target_arrays" = ${TargetArrays}
            "time_remaining" = ${TimeRemaining}
        }

        return $PSO
    }

}

