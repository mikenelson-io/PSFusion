#
# Pure Fusion API
# Pure Fusion is fully API-driven. Most APIs which change the system (POST, PATCH, DELETE) return an Operation in status ""Pending"" or ""Running"". You can poll (GET) the operation to check its status, waiting for it to change to ""Succeeded"" or ""Failed"". 
# Version: 1.1
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Scope
The fully-qualified resource path (self_link) to scope the Role Assignment to.
.PARAMETER Principal
The unique ID of the principal (User or API Client) to assign to the role.
.OUTPUTS

RoleAssignmentPost<PSCustomObject>
#>

function Initialize-PSFRoleAssignmentPost {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Scope},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Principal}
    )

    Process {
        'Creating PSCustomObject: PSFusion => PSFRoleAssignmentPost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Scope) {
            throw "invalid value for 'Scope', 'Scope' cannot be null."
        }

        if ($null -eq $Principal) {
            throw "invalid value for 'Principal', 'Principal' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "scope" = ${Scope}
            "principal" = ${Principal}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to RoleAssignmentPost<PSCustomObject>

.DESCRIPTION

Convert from JSON to RoleAssignmentPost<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

RoleAssignmentPost<PSCustomObject>
#>
function ConvertFrom-PSFJsonToRoleAssignmentPost {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSFusion => PSFRoleAssignmentPost' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in PSFRoleAssignmentPost
        $AllProperties = ("scope", "principal")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'scope' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "scope"))) {
            throw "Error! JSON cannot be serialized due to the required property 'scope' missing."
        } else {
            $Scope = $JsonParameters.PSobject.Properties["scope"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "principal"))) {
            throw "Error! JSON cannot be serialized due to the required property 'principal' missing."
        } else {
            $Principal = $JsonParameters.PSobject.Properties["principal"].value
        }

        $PSO = [PSCustomObject]@{
            "scope" = ${Scope}
            "principal" = ${Principal}
        }

        return $PSO
    }

}

