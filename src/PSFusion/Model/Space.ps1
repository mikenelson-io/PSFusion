#
# Pure Fusion API
# Pure Fusion is fully API-driven. Most APIs which change the system (POST, PATCH, DELETE) return an Operation in status ""Pending"" or ""Running"". You can poll (GET) the operation to check its status, waiting for it to change to ""Succeeded"" or ""Failed"". 
# Version: 1.1
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Resource
No description available.
.PARAMETER TotalPhysicalSpace
Total physical space occupied by system, shared space, volume, and snapshot data. Measured in bytes.
.PARAMETER UniqueSpace
The unique physical space occupied by customer data. Unique physical space does not include shared space, snapshots, and internal array metadata. Measured in bytes.
.PARAMETER SnapshotSpace
The physical space occupied by data unique to one or more snapshots. Measured in bytes.
.OUTPUTS

Space<PSCustomObject>
#>

function Initialize-PSFSpace {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Resource},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${TotalPhysicalSpace},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${UniqueSpace},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${SnapshotSpace}
    )

    Process {
        'Creating PSCustomObject: PSFusion => PSFSpace' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "resource" = ${Resource}
            "total_physical_space" = ${TotalPhysicalSpace}
            "unique_space" = ${UniqueSpace}
            "snapshot_space" = ${SnapshotSpace}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to Space<PSCustomObject>

.DESCRIPTION

Convert from JSON to Space<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

Space<PSCustomObject>
#>
function ConvertFrom-PSFJsonToSpace {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSFusion => PSFSpace' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in PSFSpace
        $AllProperties = ("resource", "total_physical_space", "unique_space", "snapshot_space")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "resource"))) { #optional property not found
            $Resource = $null
        } else {
            $Resource = $JsonParameters.PSobject.Properties["resource"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "total_physical_space"))) { #optional property not found
            $TotalPhysicalSpace = $null
        } else {
            $TotalPhysicalSpace = $JsonParameters.PSobject.Properties["total_physical_space"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "unique_space"))) { #optional property not found
            $UniqueSpace = $null
        } else {
            $UniqueSpace = $JsonParameters.PSobject.Properties["unique_space"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "snapshot_space"))) { #optional property not found
            $SnapshotSpace = $null
        } else {
            $SnapshotSpace = $JsonParameters.PSobject.Properties["snapshot_space"].value
        }

        $PSO = [PSCustomObject]@{
            "resource" = ${Resource}
            "total_physical_space" = ${TotalPhysicalSpace}
            "unique_space" = ${UniqueSpace}
            "snapshot_space" = ${SnapshotSpace}
        }

        return $PSO
    }

}

