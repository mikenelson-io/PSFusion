#
# Pure Fusion API
# Pure Fusion is fully API-driven. Most APIs which change the system (POST, PATCH, DELETE) return an Operation in status ""Pending"" or ""Running"". You can poll (GET) the operation to check its status, waiting for it to change to ""Succeeded"" or ""Failed"". 
# Version: 1.1
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Additional description about the Placement Group, had it been created. This is only used to make a PlacementRecommendation for a new Placement Group that doesn't already exist.

.PARAMETER AvailabilityZone
No description available.
.PARAMETER StorageService
No description available.
.OUTPUTS

SimulatedPlacement<PSCustomObject>
#>

function Initialize-PSFSimulatedPlacement {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${AvailabilityZone},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${StorageService}
    )

    Process {
        'Creating PSCustomObject: PSFusion => PSFSimulatedPlacement' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "availability_zone" = ${AvailabilityZone}
            "storage_service" = ${StorageService}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to SimulatedPlacement<PSCustomObject>

.DESCRIPTION

Convert from JSON to SimulatedPlacement<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

SimulatedPlacement<PSCustomObject>
#>
function ConvertFrom-PSFJsonToSimulatedPlacement {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSFusion => PSFSimulatedPlacement' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in PSFSimulatedPlacement
        $AllProperties = ("availability_zone", "storage_service")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "availability_zone"))) { #optional property not found
            $AvailabilityZone = $null
        } else {
            $AvailabilityZone = $JsonParameters.PSobject.Properties["availability_zone"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "storage_service"))) { #optional property not found
            $StorageService = $null
        } else {
            $StorageService = $JsonParameters.PSobject.Properties["storage_service"].value
        }

        $PSO = [PSCustomObject]@{
            "availability_zone" = ${AvailabilityZone}
            "storage_service" = ${StorageService}
        }

        return $PSO
    }

}

