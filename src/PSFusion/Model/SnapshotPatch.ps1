#
# Pure Fusion API
# Pure Fusion is fully API-driven. Most APIs which change the system (POST, PATCH, DELETE) return an Operation in status ""Pending"" or ""Running"". You can poll (GET) the operation to check its status, waiting for it to change to ""Succeeded"" or ""Failed"". 
# Version: 1.1
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Set destroyed to false to recover a pending snapshot. Set destroyed to true to destroy the snapshot. A destroyed snapshot will be eradicated after some time.

.PARAMETER Destroyed
No description available.
.OUTPUTS

SnapshotPatch<PSCustomObject>
#>

function Initialize-PSFSnapshotPatch {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Destroyed}
    )

    Process {
        'Creating PSCustomObject: PSFusion => PSFSnapshotPatch' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "destroyed" = ${Destroyed}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to SnapshotPatch<PSCustomObject>

.DESCRIPTION

Convert from JSON to SnapshotPatch<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

SnapshotPatch<PSCustomObject>
#>
function ConvertFrom-PSFJsonToSnapshotPatch {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSFusion => PSFSnapshotPatch' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in PSFSnapshotPatch
        $AllProperties = ("destroyed")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "destroyed"))) { #optional property not found
            $Destroyed = $null
        } else {
            $Destroyed = $JsonParameters.PSobject.Properties["destroyed"].value
        }

        $PSO = [PSCustomObject]@{
            "destroyed" = ${Destroyed}
        }

        return $PSO
    }

}

